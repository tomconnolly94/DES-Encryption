#include "pch.h"
#include "CppUnitTest.h"
#include "../DESEncryption/KeyCalculator.cpp"
#include "../DESEncryption/PermutationTable.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace DESEncryptionTest
{
	TEST_CLASS(KeyCalculatorTest)
	{
	public:

		TEST_METHOD(TestExecutePermutation)
		{
			//key: djuaytsp
			std::string inputKey = "0110010001101010011101010110000101111001011101000111001101110000";
			std::vector<std::string> expectedRoundKeys = {
				"110011000011111010000001101001001110011010011100",
				"011110000000000101100110100000110011110111011001",
				"101000011100100000110101011011111011001100110100",
				"100001010010001110110110010100010100110011101111",
				"101101100001011010111001010010101001100010011100",
				"110111110001001001100000100000010111010110111101",
				"100010101101101011010100001011110001101110100000",
				"000111010111001101000110111101000100100001110110",
				"011001110000111100011100110100111100100001000101",
				"010011111011000010010001110001101010011010011000",
				"000111111000110011110010101111010011011101001101",
				"111111100110000010000010001111101101001011100010",
				"001110111000011100001100011101001110110001100110",
				"010010000001000010011111101010001010110011011010",
				"001101001000100001111100101011011111011100010011",
				"110100011101110110010000101011110001101100101000"
			};

			std::vector<std::string> actualRoundKeys = KeyCalculator::CalculateRoundKeys(inputKey);

			Assert::AreEqual(expectedRoundKeys.size(), actualRoundKeys.size());

			for (int i = 0; i < actualRoundKeys.size(); ++i) {
				Assert::AreEqual(expectedRoundKeys[i], actualRoundKeys[i]);
			}
		}
	};
}
